name: MaaYYs Resource Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout MaaYYs repository
        uses: actions/checkout@v4
        with:
          path: MaaYYs
          fetch-depth: 0  # 获取完整历史以便生成变更日志

      - name: Update resource_version in config file
        shell: pwsh
        working-directory: MaaYYs
        run: |
          # Get the current tag
          $currentTag = "${{ github.ref_name }}"
          Write-Host "Updating resource_config.json with version: $currentTag"

          # Read the existing resource_config.json
          $configPath = "resource_config.json"
          $configContent = Get-Content -Path $configPath -Raw | ConvertFrom-Json

          # Update the resource_version property
          $configContent.resource_version = $currentTag

          # Write the updated content back to the file
          $configContent | ConvertTo-Json -Depth 10 | Set-Content -Path $configPath

          Write-Host "resource_config.json updated successfully"
          Get-Content -Path $configPath
          

      - name: Generate Changelog
        id: changelog
        shell: pwsh
        working-directory: MaaYYs
        run: |
          # 获取当前标签
          $currentTag = "${{ github.ref_name }}"
          Write-Host "Current tag: $currentTag"
          
          # 获取上一个标签
          $previousTag = git describe --tags --abbrev=0 HEAD^ 2>$null
          if (-not $previousTag) {
            Write-Host "No previous tag found, using first commit"
            $previousTag = git rev-list --max-parents=0 HEAD
          }
          Write-Host "Previous tag/commit: $previousTag"
          
          # 生成变更日志
          $changelog = git log --pretty=format:"* %s (%h)" "$previousTag..$currentTag"
          if (-not $changelog) {
            $changelog = "* 首次发布"
          }
          
          # 设置变更日志为GitHub Actions输出变量
          $changelog = $changelog -replace "`n", "%0A"
          echo "CHANGELOG<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo $changelog | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          
          Write-Host "Generated changelog for release"

      - name: Fetch latest MFWPH release
        shell: pwsh
        run: |
          # 创建下载目录
          New-Item -Path "mfwph-download" -ItemType Directory -Force

          # 获取最新的MFWPH发布版本
          $releasesUri = "https://api.github.com/repos/TanyaShue/MFWPH/releases/latest"
          $release = Invoke-RestMethod -Uri $releasesUri
          $downloadUrl = ($release.assets | Where-Object { $_.name -eq "MFWPH_RELEASE.zip" }).browser_download_url
          
          if (-not $downloadUrl) {
            Write-Host "::error::Could not find MFWPH_RELEASE.zip in the latest release"
            exit 1
          }
          
          Write-Host "Downloading MFWPH from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "mfwph-download/MFWPH_RELEASE.zip"
          
          # 解压MFWPH
          Expand-Archive -Path "mfwph-download/MFWPH_RELEASE.zip" -DestinationPath "mfwph-extracted" -Force
          Write-Host "MFWPH package extracted successfully"

      - name: Prepare resource directory
        shell: pwsh
        run: |
          # 定义要排除的文件和文件夹列表
          $excludeList = @('.git', '.github', '.idea','.gitignore', '.gitattributes','debug', 'dist', 'mfwph-download', 'mfwph-extracted', 'resources-temp')

          # 确保资源目录存在
          New-Item -Path "mfwph-extracted/assets/resource/MaaYYs" -ItemType Directory -Force

          # 清空目标资源目录（如果存在）
          if (Test-Path -Path "mfwph-extracted/assets/resource/MaaYYs") {
            Get-ChildItem -Path "mfwph-extracted/assets/resource/MaaYYs" | Remove-Item -Recurse -Force
          }

          # 获取源目录中的所有文件和文件夹
          $allItems = Get-ChildItem -Path "MaaYYs" -Force

          # 复制不在排除列表中的所有文件和文件夹
          foreach ($item in $allItems) {
            $itemName = $item.Name
            if ($excludeList -notcontains $itemName) {
              if (Test-Path -Path $item.FullName -PathType Container) {
                # 如果是目录，则递归复制
                New-Item -Path "mfwph-extracted/assets/resource/MaaYYs/$itemName" -ItemType Directory -Force
                Copy-Item -Path "$($item.FullName)/*" -Destination "mfwph-extracted/assets/resource/MaaYYs/$itemName" -Recurse -Force
                Write-Host "Copied directory $itemName to resource directory"
              } else {
                # 如果是文件，则直接复制
                Copy-Item -Path $item.FullName -Destination "mfwph-extracted/assets/resource/MaaYYs/$itemName" -Force
                Write-Host "Copied file $itemName to resource directory"
              }
            } else {
              Write-Host "Excluded $itemName from resource directory"
            }
          }
          Write-Host "Resources copied successfully to MFWPH package"

      - name: Create full package
        shell: pwsh
        run: |
          # 创建输出目录
          New-Item -Path "dist" -ItemType Directory -Force
          
          # 创建完整的ZIP包
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("mfwph-extracted", "${{ github.workspace }}/dist/MAA_YYS_FULL.zip")
          
          Write-Host "Created full package: MAA_YYS_FULL.zip"

      - name: Create resources-only package
        shell: pwsh
        run: |
          # 定义要包含的文件和文件夹列表
          $includeList = @('app', 'custom_dir', 'image', 'model', 'pipeline', 'LICENSE', 'README.md', 'resource_config.json')
          
          # 创建临时目录用于资源包
          New-Item -Path "resources-temp" -ItemType Directory -Force
          
          # 仅复制包含列表中的文件和文件夹到临时目录
          foreach ($item in $includeList) {
            $sourcePath = "MaaYYs/$item"
            if (Test-Path -Path $sourcePath) {
              if (Test-Path -Path $sourcePath -PathType Container) {
                # 如果是目录，则递归复制
                New-Item -Path "resources-temp/$item" -ItemType Directory -Force
                Copy-Item -Path "$sourcePath/*" -Destination "resources-temp/$item" -Recurse -Force
              } else {
                # 如果是文件，则直接复制
                Copy-Item -Path $sourcePath -Destination "resources-temp/$item" -Force
              }
              Write-Host "Copied $item to resources-only package"
            } else {
              Write-Host "Warning: $item not found in source repository for resources-only package"
            }
          }
          
          # 创建仅包含资源的ZIP文件
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("resources-temp", "${{ github.workspace }}/dist/MAA_YYS_RESOURCES_ONLY.zip")
          
          Write-Host "Created resources-only package: MAA_YYS_RESOURCES_ONLY.zip"

      - name: List files in dist directory
        shell: pwsh
        run: |
          Write-Host "Contents of dist directory:"
          Get-ChildItem -Path ./dist -Recurse | Select-Object FullName
          Write-Host "Zip file details:"
          Get-Item -Path ./dist/MAA_YYS_FULL.zip | Select-Object FullName, Length, LastWriteTime
          Get-Item -Path ./dist/MAA_YYS_RESOURCES_ONLY.zip | Select-Object FullName, Length, LastWriteTime

      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 版本 ${{ github.ref_name }} 更新日志
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## 下载
            - **完整包**: 包含 MFWPH 和 MaaYYs 资源，可直接运行
            - **仅资源包**: 仅包含 MaaYYs 资源，适用于已有 MFWPH 的用户
            [已有 Mirror酱 CDK？点击前往高速下载](https://mirrorchyan.com/zh/projects?rid=M9A)
          draft: false
          prerelease: false
          artifacts: |
            ${{ github.workspace }}/dist/MAA_YYS_FULL.zip
            ${{ github.workspace }}/dist/MAA_YYS_RESOURCES_ONLY.zip
          artifactContentType: application/zip
          artifactErrorsFailBuild: true

      - name: Trigger MirrorChyanUploading
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}