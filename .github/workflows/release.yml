name: MaaYYs Resource Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout MaaYYs repository
        uses: actions/checkout@v4
        with:
          path: MaaYYs

      - name: Fetch latest MFWPH release
        shell: pwsh
        run: |
          # 创建下载目录
          New-Item -Path "mfwph-download" -ItemType Directory -Force

          # 获取最新的MFWPH发布版本
          $releasesUri = "https://api.github.com/repos/TanyaShue/MFWPH/releases/latest"
          $release = Invoke-RestMethod -Uri $releasesUri
          $downloadUrl = ($release.assets | Where-Object { $_.name -eq "MFWPH_RELEASE.zip" }).browser_download_url
          
          if (-not $downloadUrl) {
            Write-Host "::error::Could not find MFWPH_RELEASE.zip in the latest release"
            exit 1
          }
          
          Write-Host "Downloading MFWPH from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile "mfwph-download/MFWPH_RELEASE.zip"
          
          # 解压MFWPH
          Expand-Archive -Path "mfwph-download/MFWPH_RELEASE.zip" -DestinationPath "mfwph-extracted" -Force
          Write-Host "MFWPH package extracted successfully"

      - name: Prepare resource directory
        shell: pwsh
        run: |
          # 确保资源目录存在
          New-Item -Path "mfwph-extracted/assets/resource/MaaYYs" -ItemType Directory -Force
          
          # 清空目标资源目录（如果存在）
          if (Test-Path -Path "mfwph-extracted/assets/resource/MaaYYs") {
            Get-ChildItem -Path "mfwph-extracted/assets/resource/MaaYYs" | Remove-Item -Recurse -Force
          }
          
          # 复制当前仓库内容到资源目录
          Copy-Item -Path "MaaYYs/*" -Destination "mfwph-extracted/assets/resource/MaaYYs" -Recurse -Force
          Write-Host "Resources copied successfully to MFWPH package"

      - name: Create full package
        shell: pwsh
        run: |
          # 创建输出目录
          New-Item -Path "dist" -ItemType Directory -Force
          
          # 创建完整的ZIP包
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("mfwph-extracted", "${{ github.workspace }}/dist/MAA_YYS_FULL.zip")
          
          Write-Host "Created full package: MAA_YYS_FULL.zip"

      - name: Create resources-only package
        shell: pwsh
        run: |
          # 创建仅包含资源的ZIP文件
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory("MaaYYs", "${{ github.workspace }}/dist/MAA_YYS_RESOURCES_ONLY.zip")
          
          Write-Host "Created resources-only package: MAA_YYS_RESOURCES_ONLY.zip"

      - name: List files in dist directory
        shell: pwsh
        run: |
          Write-Host "Contents of dist directory:"
          Get-ChildItem -Path ./dist -Recurse | Select-Object FullName
          Write-Host "Zip file details:"
          Get-Item -Path ./dist/MAA_YYS_FULL.zip | Select-Object FullName, Length, LastWriteTime
          Get-Item -Path ./dist/MAA_YYS_RESOURCES_ONLY.zip | Select-Object FullName, Length, LastWriteTime

      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          artifacts: |
            ${{ github.workspace }}/dist/MAA_YYS_FULL.zip
            ${{ github.workspace }}/dist/MAA_YYS_RESOURCES_ONLY.zip
          artifactContentType: application/zip
          artifactErrorsFailBuild: true

      - name: Trigger MirrorChyanUploading
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}